{"version":3,"sources":["components/SearchBox/search-box.js","components/Card/card.js","components/CardList/card-list.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","handleChange","placeholder","onChange","type","Card","monster","className","alt","src","id","name","email","CardList","props","monsterData","map","App","event","setState","searchField","target","value","state","monsters","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","handleTheChange","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAEaA,EAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YACxC,OACE,uBAAOC,SAAUF,EAAcC,YAAaA,EAAaE,KAAK,YCFrDC,G,YAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,eACtB,6BAAKJ,EAAQK,OACb,6BAAKL,EAAQM,aCJNC,EAAW,SAACC,GACvB,OACE,qBAAKP,UAAU,YAAf,SACGO,EAAMC,YAAYC,KAAI,SAACV,GAAD,OACrB,cAAC,EAAD,CAAMA,QAASA,GAAcA,EAAQI,UC0C9BO,E,kDApCb,WAAYH,GAAQ,IAAD,8BACjB,cAAMA,IAcRb,aAAe,SAACiB,GAAD,OAAW,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAZlE,EAAKC,MAAQ,CACXC,SAAU,GACVJ,YAAa,IALE,E,qDASnB,WAAqB,IAAD,OAClBK,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKV,SAAS,CAAEK,SAAUK,S,oBAK/C,WAAU,IAAD,EAC2BC,KAAKP,MAA/BC,EADD,EACCA,SAAUJ,EADX,EACWA,YACZW,EAAmBP,EAASQ,QAAO,SAAC1B,GACxC,OAAOA,EAAQK,KAAKsB,cAAcC,SAASd,EAAYa,kBAGzD,OACE,sBAAK1B,UAAU,MAAf,UACE,oBAAIA,UAAU,iBAAd,8BACA,cAAC,EAAD,CACEN,aAAc6B,KAAKK,gBACnBjC,YAAa,oBAEf,cAAC,EAAD,CAAUa,YAAagB,W,GA/BbK,aCAHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5b10ce90.chunk.js","sourcesContent":["import \"./search-box.css\";\n\nexport const SearchBox = ({ handleChange, placeholder }) => {\n  return (\n    <input onChange={handleChange} placeholder={placeholder} type=\"search\" />\n  );\n};\n","import \"./card.css\";\n\nexport const Card = ({ monster }) => {\n  return (\n    <div className=\"Card\">\n      <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set3`} />\n      <h2>{monster.name}</h2>\n      <h2>{monster.email}</h2>\n    </div>\n  );\n};\n","import \"./card-list.css\";\nimport { Card } from \"../Card/card\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"Card_List\">\n      {props.monsterData.map((monster) => (\n        <Card monster={monster} key={monster.id} />\n      ))}\n    </div>\n  );\n};\n","//-- Create data set of Monsters including image, name, and email --\n//-- Create Monster Container --\n//-- Create a Monster Card that takes props for image, name, and email --\n//-- Map data over Monster Card data and display cards --\n// Implement search functionality\n// Style Container and Monster Card\n\nimport \"./App.css\";\nimport { Component } from \"react\";\nimport { SearchBox } from \"./components/SearchBox/search-box\";\nimport { CardList } from \"./components/CardList/card-list\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  handleChange = (event) => this.setState({ searchField: event.target.value });\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"Monster-header\">Monsters Rolodex</h1>\n        <SearchBox\n          handleChange={this.handleTheChange}\n          placeholder={\"Search Monsters\"}\n        />\n        <CardList monsterData={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}